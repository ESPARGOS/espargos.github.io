name: Deploy site to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.136.5
    steps:
      - name: Clone pyespargos repo
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.PYESPARGOS_DEPLOY_KEY }}
          repository: ESPARGOS/pyespargos
          submodules: recursive
          path: pyespargos
      - name: Install sphinx and sphinx-rtd-theme
        run: sudo pip install sphinx sphinx-rtd-theme
      - name: Install pyespargos requirements
        run: cd pyespargos && pip install -r requirements.txt
      - name: Build sphinx docs
        run: make -C ./pyespargos/docs/ html
      - name: Clone controller-firmware repo
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CONTROLLER_FIRMWARE_DEPLOY_KEY }}
          repository: ESPARGOS/controller-firmware
          submodules: recursive
          path: controller-firmware
      - name: Clone sensor-firmware repo
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SENSOR_FIRMWARE_DEPLOY_KEY }}
          repository: ESPARGOS/sensor-firmware
          submodules: recursive
          path: sensor-firmware
      - name: Build controller-firmware
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.2
          target: esp32
          path: 'controller-firmware'
      - name: Build sensor-firmware
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.2
          target: esp32s2
          path: 'sensor-firmware'
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: espargos.github.io
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        working-directory: ./espargos.github.io/site
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Copy sphinx docs to hugo site
        run: cp -r pyespargos/docs/_build/html/* ./espargos.github.io/site/public/docs
      - name: Copy controller assets file
        run: cp controller-firmware/build/web.bin ./espargos.github.io/site/public/firmware/espargos-controller-assets.bin
      - name: Copy controller firmware file
        run: cp controller-firmware/build/espargos-controller-firmware.bin ./espargos.github.io/site/public/firmware/espargos-controller-firmware.bin
      - name: Copy sensor firmware file
        run: cp sensor-firmware/build/espargos-sensor-firmware.bin ./espargos.github.io/site/public/firmware/espargos-sensor-firmware.bin
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./espargos.github.io/site/public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
